#pragma once

#include <stdint.h>

#define ORBIS_KEYBOARD_NUM_LOCK 1
#define ORBIS_KEYBOARD_CAPS_LOCK 2
#define ORBIS_KEYBOARD_SCROLL_LOCK 4

#define ORBIS_KEYBOARD_MOD_LEFT_CTRL 1
#define ORBIS_KEYBOARD_MOD_LEFT_SHIFT 2
#define ORBIS_KEYBOARD_MOD_LEFT_ALT 4
#define ORBIS_KEYBOARD_MOD_LEFT_META 8 // windows
#define ORBIS_KEYBOARD_MOD_RIGHT_CTRL 16
#define ORBIS_KEYBOARD_MOD_RIGHT_SHIFT 32
#define ORBIS_KEYBOARD_MOD_RIGHT_ALT 64
#define ORBIS_KEYBOARD_MOD_RIGHT_META 128 // windows

#define ORBIS_KEYBOARD_KEY_RETURN 40
#define ORBIS_KEYBOARD_KEY_ESCAPE 41
#define ORBIS_KEYBOARD_KEY_BACKSPACE 42
#define ORBIS_KEYBOARD_KEY_TAB 43
#define ORBIS_KEYBOARD_KEY_CAPS_LOCK 57
#define ORBIS_KEYBOARD_KEY_F1 58
#define ORBIS_KEYBOARD_KEY_F2 59
#define ORBIS_KEYBOARD_KEY_F3 60
#define ORBIS_KEYBOARD_KEY_F4 61
#define ORBIS_KEYBOARD_KEY_F5 62
#define ORBIS_KEYBOARD_KEY_F6 63
#define ORBIS_KEYBOARD_KEY_F7 64
#define ORBIS_KEYBOARD_KEY_F8 65
#define ORBIS_KEYBOARD_KEY_F9 66
#define ORBIS_KEYBOARD_KEY_F10 67
#define ORBIS_KEYBOARD_KEY_F11 68
#define ORBIS_KEYBOARD_KEY_F12 69
#define ORBIS_KEYBOARD_KEY_PRINTSCREEN 70
#define ORBIS_KEYBOARD_KEY_SCROLL_LOCK 71
#define ORBIS_KEYBOARD_KEY_PAUSE 72
#define ORBIS_KEYBOARD_KEY_INSERT 73
#define ORBIS_KEYBOARD_KEY_HOME 74
#define ORBIS_KEYBOARD_KEY_PGUP 75
#define ORBIS_KEYBOARD_KEY_DELETE 76
#define ORBIS_KEYBOARD_KEY_END 77
#define ORBIS_KEYBOARD_KEY_PGDOWN 78
#define ORBIS_KEYBOARD_KEY_NUM_LOCK 83
#define ORBIS_KEYBOARD_KEY_NUMPAD_1 89
#define ORBIS_KEYBOARD_KEY_NUMPAD_2 90
#define ORBIS_KEYBOARD_KEY_NUMPAD_3 91
#define ORBIS_KEYBOARD_KEY_NUMPAD_4 92
#define ORBIS_KEYBOARD_KEY_NUMPAD_5 93
#define ORBIS_KEYBOARD_KEY_NUMPAD_6 94
#define ORBIS_KEYBOARD_KEY_NUMPAD_7 95
#define ORBIS_KEYBOARD_KEY_NUMPAD_8 96
#define ORBIS_KEYBOARD_KEY_NUMPAD_9 97
#define ORBIS_KEYBOARD_KEY_NUMPAD_0 98
#define ORBIS_KEYBOARD_KEY_MENU 101

#define ORBIS_KEYBOARD_CHAR_BACKSPACE '\b'
#define ORBIS_KEYBOARD_CHAR_TAB '\t'
#define ORBIS_KEYBOARD_CHAR_RETURN '\n'

typedef struct OrbisKeyboardData
{
	uint32_t timestamp; // microseconds XXX: is it 64-bit?
	uint8_t padding[12];
	int32_t unk1; // always 1
	int32_t nkeys;
	uint32_t locks; // num lock, caps lock, scroll lock
	uint32_t mods; // ctrl, shift, alt, meta
	uint16_t keycodes[32];
} OrbisKeyboardData;

typedef struct OrbisKeyboardKey2Char
{
	int32_t ok;
	int32_t ok2; //wtf it is
	int32_t keycode;
	char unk[8]; //zeros
} OrbisKeyboardKey2Char;
